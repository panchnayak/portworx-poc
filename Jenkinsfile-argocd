pipeline {
    agent any
    stages {
        stage('Setup ArgoCD Parameters') {
          steps {
            script {
              properties([
                parameters([
                  string(
                    defaultValue: 'aws-pnayak',
                    name: 'AWS_CREDS',
                    trim: true
                  ),
                  string(
                    defaultValue: 'us-east-1',
                    name: 'FIRST_REGION_NAME',
                    trim: true
                  ),
                  choice(
                    choices: ['nothing', 'deploy-argocd-server','delete-argocd-server', 'update-argo-password','deploy-portworx-argocd-app' ,'delete-portworx-argocd-app'],
                    name: 'REQUESTED_ACTION'
                  ),
                  string(
                    defaultValue: 'argocd_current_password',
                    name: 'ARGOCD_CURRENT_PASSWORD',
                    trim: true
                  ),
                  string(
                    defaultValue: 'argocd_new_password',
                    name: 'ARGOCD_NEW_PASSWORD',
                    trim: true
                  )
                ])
              ])
           }
         }
        }
        stage('Delete Existing ArgoCD Server on EKS Cluster ') {
          when { expression { params.REQUESTED_ACTION == 'delete-argocd-server'  } }
            steps {
              withAWS(credentials: params.AWS_CREDS, region: params.FIRST_REGION_NAME) {
                echo "Deleting ArgoCD Server on EKS Cluster"
                sh "kubectl delete -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"
                sh "kubectl delete namespace argocd"
              }
            }
        }
        stage('Deploy ArgoCD Server on EKS Cluster ') {
          when { expression { params.REQUESTED_ACTION == 'deploy-argocd-server'  }  }
            steps {
              withAWS(credentials: params.AWS_CREDS, region: params.FIRST_REGION_NAME) {
                echo "Installing ArgoCD Server on EKS Cluster"
                sh "kubectl create namespace argocd"
                sh "kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"
                sh "kubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'"
                sh "kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d"
                sh "kubectl -n argocd  get svc argocd-server  -o json | jq -r '.status.loadBalancer.ingress[0].hostname'"
              }
            }
        }
        stage('Update ArgoCD Password ') {
          when { expression { params.REQUESTED_ACTION == 'update-argo-password'  }  }
            steps {
                echo "Updating ARGO CD Password"
                sh "argocd login "+params.ARGOCD_URL+" --username admin --password "+params.ARGOCD_CURRENT_PASSWORD+" --insecure"
                sh "argocd account update-password --account admin --current-password "+params.ARGOCD_CURRENT_PASSWORD+" --new-password "+params.ARGOCD_NEW_PASSWORD
            }
        }
        stage('Deploy Portworx Cluster using ArgoCD ') {
          when { expression { params.REQUESTED_ACTION == 'deploy-portworx-argocd-app'  }  }
            steps {
                echo "Deploying Portworx as an ArgocCD Application"
                withAWS(credentials: params.AWS_CREDS, region: params.FIRST_REGION_NAME) {
                  sh "kubectl apply -f https://raw.githubusercontent.com/panchnayak/portworx-poc/main/portworx-app.yaml"
                  sh "kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d"
                  sh "kubectl get svc -A"
                  sh "ARGO_PWD=`kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d`"
                  sh "ARGO_URL=`kubectl -n argocd  get svc argocd-server  -o json | jq -r '.status.loadBalancer.ingress[0].hostname'`"
                  //echo "Portworx Storage Closter Deployed as an ArgoCD application,Please loginto ArgoCD URL "+ ${ARG_URL}+" as admin and Password "+${ARGO_PWD}
                }
            }
        } 
        stage('Delete Portworx Cluster using ArgoCD ') {
          when { expression { params.REQUESTED_ACTION == 'delete-portworx-argocd-app'  }  }
            steps {
                echo "Deleteing Portworx as an ArgocCD Application"
                withAWS(credentials: params.AWS_CREDS, region: params.FIRST_REGION_NAME) {
                  sh "kubectl delete -f https://raw.githubusercontent.com/panchnayak/portworx-poc/main/portworx-app.yaml"
                }
            }
        } 
    }
}
