pipeline {
    agent  any
    stages {
      stage('Setup parameters') {
        steps {
          script {
            properties([
              parameters([
                string(
                  defaultValue: 'aws-pnayak',
                  name: 'AWS_CREDS',
                  trim: true
                ),
                choice(
                  choices: ['Default: Do Nothing', 'Deploy EKS Cluster', 'Destroy EKS Cluster'],
                  name: 'ACTION_REQUESTING'
                ),
                string(
                  defaultValue: 'pnayak-eks',
                  name: 'CLUSTER_NAME',
                  trim: true
                ),
                string(
                  defaultValue: 'pnayak-eks',
                  name: 'NODEGROUP_NAME',
                  trim: true
                ),
                string(
                  defaultValue: 'us-east-1',
                  name: 'FIRST_REGION_NAME',
                  trim: true
                )
              ])
            ])
          }
        }
      }
      stage('EKS Cluster') {
        parallel {
          stage('Create EKS Clusters ') {
            when { expression { params.ACTION_REQUESTING == 'Deploy EKS Cluster'  }  }
            steps {
              withAWS(credentials: params.AWS_CREDS, region: params.FIRST_REGION_NAME) {
                echo "Deploying EKS Cluster "+params.CLUSTER_NAME+"1 in the region:"+ params.FIRST_REGION_NAME
                sh "./aws/scripts/create-eks-cluster.sh "+ params.CLUSTER_NAME+"  "+params.NODEGROUP_NAME+"  "+params.FIRST_REGION_NAME
              }
            }
          }
          stage('Delete ArgoCD Server') {
            when { expression { params.ACTION_REQUESTING == 'Destroy EKS Cluster'  }  }
            steps {
              withAWS(credentials: params.AWS_CREDS, region: params.FIRST_REGION_NAME) {
                echo "Deleting ArgoCD Server on EKS Cluster"
                sh "kubectl delete -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"
                sh "kubectl delete namespace argocd"
              }
            }
          }
        }
      }
      stage('ArgoCD Cluster') {
        parallel {
          stage('Create ArgoCD Server') {
            when { expression { params.ACTION_REQUESTING == 'Deploy EKS Cluster'  }  }
            steps {
              withAWS(credentials: params.AWS_CREDS, region: params.FIRST_REGION_NAME) {
                echo "Installing ArgoCD Server on EKS Cluster"
                sh "kubectl create namespace argocd"
                sh "kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"
                sh "kubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'"
                sh "kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d"
                sh "kubectl -n argocd  get svc argocd-server  -o json | jq -r '.status.loadBalancer.ingress[0].hostname'"
              }
            }
          }
          stage('Destroy EKS Clusters ') {
            when { expression { params.ACTION_REQUESTING == 'Destroy EKS Cluster'  }  }
            steps {
              withAWS(credentials: params.AWS_CREDS, region: params.FIRST_REGION_NAME) {
                echo "Destroying EKS Cluster "+params.CLUSTER_NAME+"1 in the region:"+ params.FIRST_REGION_NAME
                sh "./aws/scripts/destroy-eks-cluster.sh "+ params.CLUSTER_NAME+"  "+params.FIRST_REGION_NAME
              }
            }
          }
        }
      }
  }
}
