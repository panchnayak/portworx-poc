pipeline {
    agent  any
    stages {
        stage('Setup parameters') {
            steps {
                script {
                    properties([
                        parameters([
                            string(defaultValue: 'aws-pnayak',name: 'AWS_CREDS',trim: true),
                            choice(choices: ['Default: Do Nothing', 'Deploy Multi Cloud Portworx Cluster', 'Destroy MultiCloud Portworx Cluster'],name: 'ACTION_REQUESTING'),
                            choice(choices: ['First-Cloud: AWS', 'First-Cloud: GCP', 'First-Cloud: VMware vSphere'],name: 'FIRST_CLOUD_ENV'),
                            string(defaultValue: 'pnayak-eks-1',name: 'EKS_CLUSTER_NAME',trim: true),
                            string(defaultValue: 'pnayak-eks-1-ng',name: 'NODEGROUP_NAME',trim: true),
                            string(defaultValue: 'us-east-1',name: 'AWS_REGION_NAME',trim: true),
                            string(defaultValue: 'pnayak-gke-1',name: 'GKE_CLUSTER_NAME',trim: true),
                            string(defaultValue: 'us-east-1',name: 'GCP_ZONE_NAME',trim: true),
                            string(defaultValue: 'pnayak-vsphere-1',name: 'VSPHERE_CLUSTER_NAME',trim: true),
                            choice(choices: ['Second-Cloud: AWS', 'Second-Cloud: GCP', 'Second-Cloud: VMware vSphere'],name: 'SECOND_CLOUD_ENV'),
                            string(defaultValue: 'pnayak-eks-2',name: 'EKS_CLUSTER_NAME',trim: true),
                            string(defaultValue: 'pnayak-eks-2-ng',name: 'NODEGROUP_NAME',trim: true),
                            string(defaultValue: 'us-east-1',name: 'AWS_REGION_NAME',trim: true),
                            string(defaultValue: 'pnayak-gke-2',name: 'GKE_CLUSTER_NAME',trim: true),
                            string(defaultValue: 'us-east-1',name: 'GCP_ZONE_NAME',trim: true),
                            string(defaultValue: 'pnayak-vsphere-2',name: 'VSPHERE_CLUSTER_NAME',trim: true)
                        ])
                    ])
                }
            }
        }
        stage('EKS Cluster') {
            parallel {
                stage('Create EKS Cluster-1') {
                    when { expression { params.ACTION_REQUESTING == 'Deploy Metro Cluster-x'  }  }
                        steps {
                            withAWS(credentials: params.AWS_CREDS, region: params.FIRST_REGION_NAME) {
                                echo "Deploying EKS Cluster "+params.CLUSTER_NAME+"1 in the region:"+ params.FIRST_REGION_NAME
                                sh "./aws/scripts/create-eks-cluster.sh "+ params.CLUSTER_NAME+"  "+params.NODEGROUP_NAME+"  "+params.FIRST_REGION_NAME
                            }
                        }
                }
                stage('Create EKS Cluster-2') {
                    when { expression { params.ACTION_REQUESTING == 'Deploy Metro Cluster-x'  }  }
                        steps {
                            withAWS(credentials: params.AWS_CREDS, region: params.SECOND_REGION_NAME) {
                                echo "Deploying EKS Cluster "+params.CLUSTER_NAME+"1 in the region:"+ params.FIRST_REGION_NAME
                                sh "./aws/scripts/create-eks-cluster.sh "+ params.CLUSTER_NAME+"  "+params.NODEGROUP_NAME+"  "+params.SECOND_REGION_NAME
                            }
                        }
                }
            }
        }
        stage('Portworx Cluster') {
            parallel {
                stage('Deploy Portworx EKS Cluster-1') {
                    when { expression { params.ACTION_REQUESTING == 'Deploy Metro Cluster-x'  }  }
                    steps {
                        withAWS(credentials: params.AWS_CREDS, region: params.FIRST_REGION_NAME) {
                            echo "Installing Portworx on EKS Cluster"
                            sh "kubectl apply -f portworx/px-operator.yaml"
                            sh "kubectl apply -f portworx/eks-px-cluster-specs.yaml"
                        }
                    }
                }
                stage('Deploy Portworx EKS Cluster-2') {
                    when { expression { params.ACTION_REQUESTING == 'Deploy Metro Cluster-x'  }  }
                    steps {
                        withAWS(credentials: params.AWS_CREDS, region: params.FIRST_REGION_NAME) {
                            echo "Installing Portworx on EKS Cluster"
                            sh "kubectl apply -f portworx/px-operator.yaml"
                            sh "kubectl apply -f portworx/eks-px-cluster-specs.yaml"
                        }
                    }
                }
            }
        }
        stage('Generate and Apply a ClusterPair Spec') {
            parallel {
                stage('Generate ClusterPairSpec EKS Cluster-2') {
                    when { expression { params.ACTION_REQUESTING == 'Deploy Metro Cluster' } }
                    steps {
                        withAWS(credentials: params.AWS_CREDS, region: params.FIRST_REGION_NAME) {
                            echo "Generate ClusterPairSpec EKS Cluster-2'"+params.CLUSTER_NAME+"1 in the region "+ params.FIRST_REGION_NAME
                            sh "kubectl apply -f portworx/px-cluster-pair-specs.yaml"
                        }
                    }
                }
                stage('Apply ClusterPairSpec Cluster-1') {
                    when { expression { params.ACTION_REQUESTING == 'Deploy Metro Cluster' } }
                    steps {
                        withAWS(credentials: params.AWS_CREDS, region: params.FIRST_REGION_NAME) {
                            echo "Apply ClusterPairSpec Cluster-1 "+params.CLUSTER_NAME+"1 in the region "+ params.FIRST_REGION_NAME
                            sh "kubectl apply -f portworx/px-cluster-pair-specs.yaml"
                        }
                    }
                }
            }
        }

        stage('Verify Cluster Pair Status') {
            when { expression { params.ACTION_REQUESTING == 'Deploy Metro Cluster' } }
            steps {
                withAWS(credentials: params.AWS_CREDS, region: params.FIRST_REGION_NAME) {
                    echo "Verify Cluster Pair Status "+params.CLUSTER_NAME+"1 in the region "+ params.FIRST_REGION_NAME
                    sh "kubectl apply -f portworx/px-cluster-pair-specs"
                }
            }
        }

        

    }
}

        
        
              
